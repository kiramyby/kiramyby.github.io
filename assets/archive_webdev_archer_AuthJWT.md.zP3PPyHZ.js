import{_ as s,c as i,o as a,a5 as e}from"./chunks/framework.D561hJ3q.js";const g=JSON.parse('{"title":"鉴权及JWT分析","description":"","frontmatter":{},"headers":[],"relativePath":"archive/webdev/archer/AuthJWT.md","filePath":"archive/webdev/archer/AuthJWT.md","lastUpdated":null}'),t={name:"archive/webdev/archer/AuthJWT.md"},n=e(`<h1 id="鉴权及jwt分析" tabindex="-1">鉴权及JWT分析 <a class="header-anchor" href="#鉴权及jwt分析" aria-label="Permalink to &quot;鉴权及JWT分析&quot;">​</a></h1><br><blockquote><p>（写于2023年12月）</p></blockquote><blockquote><p>这篇其实时间跨度很长，从期中考试前的C语言课到更新这天，主要还是根据之前列的东西慢慢学吧~ 这段时间变化和想法都挺多的，不过就留到其他时候再说吧，这里专注于鉴权和JWT~</p></blockquote><h2 id="主要鉴权方法" tabindex="-1">主要鉴权方法 <a class="header-anchor" href="#主要鉴权方法" aria-label="Permalink to &quot;主要鉴权方法&quot;">​</a></h2><p>主要有以下几类</p><ul><li>HTTP Basic Authentication</li><li>Session-Cookie</li><li>Token</li><li>OAuth</li><li>LDAP</li></ul><p>还有一些基于基本认证方式搭建的鉴权体系，比如<code>SSO</code></p><h2 id="http-basic-authentication" tabindex="-1">HTTP Basic Authentication <a class="header-anchor" href="#http-basic-authentication" aria-label="Permalink to &quot;HTTP Basic Authentication&quot;">​</a></h2><blockquote><p>一种很简单的认证方式，所以同时也很不安全</p></blockquote><p>基于HTTP请求，用请求头<code>Authorization</code>携带认证信息</p><p>在没有认证信息的情况下服务器会返回<code>401</code>状态，带有<code>WWW-Anthenticate</code>头指出安全域</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /private/index.html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span></span></code></pre></div><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.0 401 Authorization Required</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTTPd/1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sat, 27 Nov 2004 10:18:15 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">WWW-Authenticate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Basic realm=&quot;Secure Area&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 311</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DOCTYPE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TITLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Error&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TITLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">META</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTP-EQUIV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONTENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html; charset=ISO-8859-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">BODY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">H1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;401 Unauthorized.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">H1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">BODY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>ID <code>Aladdin</code> Password <code>open sesame</code></p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /private/index.html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</span></span></code></pre></div><p>当然不需要交互直接发送<code>Authorization</code>也可以</p><p>采用<code>base64</code>对<code>ID:Password</code>格式的认证信息进行编码，本质是一种明文传输，更适合在相对安全的环境中采用（好像可以在<code>https</code>中用）</p><p>优点是广泛支持,设置简便</p><p>关于<code>Apache</code>和<code>Nginx</code>的设置可以参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication#%E4%BD%BF%E7%94%A8_apache_%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE%E5%92%8C_basic_%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81" target="_blank" rel="noreferrer">HTTP 身份验证 - HTTP | MDN</a></p><h3 id="digest-authentication" tabindex="-1">Digest Authentication <a class="header-anchor" href="#digest-authentication" aria-label="Permalink to &quot;Digest Authentication&quot;">​</a></h3><blockquote><p>感觉把摘要认证视为对HTTP基本认证的小优化会更好</p></blockquote><p>本质是将明文传输变成携带验证方式的传输，通过摘要值可以对信息进行校验、防篡改（？</p><p>在摘要认证中，服务器验证客户端发送的摘要的正确性的步骤如下：</p><ol><li>服务器收到客户端发送的摘要后，会根据摘要中的信息和服务器存储的用户密码进行计算，生成一个期望的摘要值。</li><li>然后，服务器将生成的期望摘要值与客户端发送的摘要值进行比较。</li><li>如果两个摘要值相匹配，则服务器会验证通过，允许客户端继续访问所请求的资源。</li><li>如果两个摘要值不匹配，则服务器会拒绝客户端的请求，并返回相应的错误信息。</li></ol><p>给个小示例</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.0 401 Authorization Required</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">WWW-Authenticate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Digest realm=&quot;example&quot;, qop=&quot;auth&quot;, nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;, opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span></span></code></pre></div><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Digest username=&quot;alice&quot;, realm=&quot;example&quot;, nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;, uri=&quot;/dir/index.html&quot;, qop=auth, nc=00000001, cnonce=&quot;0a4f113b&quot;, response=&quot;6629fae49393a05397450978507c4ef1&quot;, opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span></span></code></pre></div><h2 id="session-cookie" tabindex="-1">Session-Cookie <a class="header-anchor" href="#session-cookie" aria-label="Permalink to &quot;Session-Cookie&quot;">​</a></h2><blockquote><p>在服务器中储存会话数据，基于<code>session_id</code>进行识别调用</p></blockquote><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><blockquote><p>使无状态的http可以承载状态信息</p></blockquote><p><code>Cookie</code>是服务器发送到用户浏览器并保存在本地的一小块数据。浏览器会存储<code>cookie</code>并在下次向同一服务器再发起请求时携带并发送到服务器上。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.0 200 OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Set-Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yummy_cookie=choco</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Set-Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tasty_cookie=strawberry</span></span></code></pre></div><p>设定Cookie时可以设定一些参数，<code>Expires</code> 过期时间，<code>Secure</code> <code>HttpOnly</code>限制访问，<code>Domain</code> <code>Path</code>定义Cookie作用域，<code>SameSite</code>设置跨站发送限制，还有<code>__Host-</code>和<code>__Secure-</code>前缀用于断言特定事实</p><p>主要有三方面功能：</p><ul><li><strong>会话状态管理</strong> 如用户登录状态、购物车、游戏分数或其他需要记录的信息</li><li><strong>个性化设置</strong> 如用户自定义设置、主题和其他设置</li><li><strong>浏览器行为跟踪</strong> 如跟踪分析用户行为等</li></ul><h3 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h3><ol><li>服务端在接收到来自客户端的首次访问时，会自动创建 Session（将 Session 保存在内存中，也可以保存在 Redis 中），然后给这个 Session 生成一个唯一的标识字符串会话身份凭证 <code>session_id</code>（即 <code>sid</code>），并在响应头 <code>Set-Cookie</code> 中设置这个唯一标识符</li><li>（非必须）签名，对 <code>sid</code> 进行加密处理，服务端会根据这个 <code>secret</code> 密钥进行解密</li><li>浏览器收到请求响应后会解析响应头，并自动将 <code>sid</code> 保存在本地 Cookie 中，浏览器在下次 HTTP 请求时请求头会自动附带上该域名下的 Cookie 信息</li><li>服务端在接收客户端请求时会去解析请求头 Cookie 中的 <code>sid</code>，然后根据这个 <code>sid</code> 去找服务端保存的该客户端的 <code>sid</code>，然后判断该请求是否合法</li><li>一旦用户登出，服务端和浏览器将会同时销毁各自保存的会话 ID，服务端会根据数据库验证会话身份凭证，如果验证通过，则继续处理</li></ol><p>流程可以参考下图</p><p><img src="https://doc.k1r4ca.top/pic/session-cookie202404132322692.jpg" alt="session-cookie"></p><h3 id="and-more" tabindex="-1">and More <a class="header-anchor" href="#and-more" aria-label="Permalink to &quot;and More&quot;">​</a></h3><p>session和cookie还是存在很多区别的，详见<a href="https://wangxiaoxi.cn/posts/http-cookie/" target="_blank" rel="noreferrer">Cookie和Session的区别 | Xiaoxi&#39;Blog</a></p><p>session方案在内存占用和安全方面是存在不足的</p><h2 id="token认证" tabindex="-1">Token认证 <a class="header-anchor" href="#token认证" aria-label="Permalink to &quot;Token认证&quot;">​</a></h2><blockquote><p>很多公有API和开发框架的内部API调用都是基于Token认证</p></blockquote><p>Token 和 Session-Cookie 认证方式中的 Session ID 不同，并非只是一个标识符。Token 一般会包含用户的相关信息，通过验证 Token 不仅可以完成 <code>身份校验</code>，还可以获取 <code>预设的信息</code> 。</p><p>流程中的主要特点：</p><ol><li>Token储存在客户端</li><li>后续Token被附带于<code>Authorization</code>字段中，</li><li>客户端负责校验Token的结构内容是否符合要求</li></ol><p>具体流程如图</p><p><img src="https://doc.k1r4ca.top/pic/token202404132318473.jpg" alt="Token"></p><p>优点：服务端无状态，无需访问远程访问或数据库，支持跨域跨程序调用，可以有效避免CSRF（无cookie）</p><p>缺点：更大占带宽，需要解密消耗性能</p><blockquote><p>详情请见后文JWT章节</p></blockquote><h3 id="session-cookie-和-token-的对比" tabindex="-1">Session-Cookie 和 Token 的对比 <a class="header-anchor" href="#session-cookie-和-token-的对比" aria-label="Permalink to &quot;Session-Cookie 和 Token 的对比&quot;">​</a></h3><p>Session-Cookie 认证仅仅靠的是 <code>sid</code> 这个生成的唯一标识符，服务端需要根据客户端传来的 <code>sid</code> 查询保存在服务端 Session 里保存的登录状态，当存储的信息数据量超过一定量时会影响服务端的处理效能。而且 Session-Cookie 认证需要靠浏览器的 Cookie 机制实现，如果遇到原生 NativeAPP 时这种机制就不起作用了，或是浏览器的 Cookie 存储功能被禁用，也是无法使用该认证机制实现鉴权的。</p><p>Token 认证机制特别的是，实质上登录状态是用户登录后存放在客户端的，服务端不会充当保存 <code>用户信息凭证</code> 的角色，当每次客户端请求时附带该凭证，只要服务端根据定义的规则校验是否匹配和合法即可，客户端存储的手段也不限于 Cookie，可以使用 Web Storage 等其他缓存方式。</p><p>简单来说，Session-Cookie 机制限制了客户端的类型，而 Token 验证机制丰富了客户端类型。而且Token机制更像是一种框架，可供用户更灵活地构建鉴权微服务</p><h2 id="oauth" tabindex="-1">OAuth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;OAuth&quot;">​</a></h2><blockquote><p>选择——“通过第三方认证登录</p></blockquote><p>OAuth（开放授权）是一个开发标准，允许用户授权 <code>第三方网站</code> 访问他们存储在另外的服务提供商中的信息，而不需要接触到用户名和密码。为了保护数据的安全和隐私，第三方网站访问用户数据前都需要 <code>显式地向用户征求授权</code>。我们常见的 OAuth 认证服务的厂商有微信、QQ、支付宝等。</p><p>OAuth 协议又有 1.0 和 2.0 两个版本，2.0 版整个授权验证流程更简单更安全，也是目前最主要的用户身份验证和授权方式。</p><p>应用场景有：第三方应用的接入、微服务鉴权互信、接入第三方平台、第一方密码登录等。</p><p>具体看这篇：<a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noreferrer">理解OAuth 2.0 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><h2 id="ldap" tabindex="-1">LDAP <a class="header-anchor" href="#ldap" aria-label="Permalink to &quot;LDAP&quot;">​</a></h2><blockquote><p>有提到LDAP可以实现SSO是一种误区</p></blockquote><p>轻量目录访问协议<code>Lightweight Directory Access Protocol</code>，一个开放、广泛被使用的工业标准（IEFT、RFC）。企业级软件也通常具备 *<em>支持 LDAP</em>- 的功能，比如 Jira、Confluence、OpenVPN 等，企业也经常采用 LDAP 服务器来作为企业的认证源和数据源。</p><p>它的主要功能点或场景：</p><ul><li>作为数据源它可以用于存储 <ul><li>企业的组织架构树</li><li>企业员工信息</li><li>证书信息</li><li>会议室，打印机等等资源</li></ul></li><li>作为认证源，它也有多种用途 <ul><li>存储用户的密码</li><li>对外提供 LDAP 协议的认证方式（通过 LDAP BIND 协议来校验用户名和密码）</li><li>密码策略（密码复杂度，历史密码记录，用户锁定等等）</li></ul></li></ul><h2 id="sso" tabindex="-1">SSO <a class="header-anchor" href="#sso" aria-label="Permalink to &quot;SSO&quot;">​</a></h2><blockquote><p>单点登录<code>Single Sign-on</code>，在多系统集群中的</p></blockquote><h3 id="同域-sso-session-cookie" tabindex="-1">同域 SSO（Session-Cookie） <a class="header-anchor" href="#同域-sso-session-cookie" aria-label="Permalink to &quot;同域 SSO（Session-Cookie）&quot;">​</a></h3><blockquote><p>实际就是利用Session-Cookie的特性</p></blockquote><p>当存在两个相同域名下的系统 A <code>a.abc.com</code> 和系统 B <code>b.abc.com</code> 时，以下为他们实现 SSO 的步骤：</p><ol><li>用户访问某个子系统时（例如 <code>a.abc.com</code>），如果没有登录，则跳转至 SSO 认证中心提供的登录页面进行登录</li><li>登录认证后，服务端把登录用户的信息存储于 Session 中，并为用户生成对应的会话身份凭证附加在响应头的 <code>Set-Cookie</code> 字段中，随着请求返回写入浏览器中，并回跳到设定的子系统链接中</li><li>下次发送请求时，当用户访问同域名的系统 B 时，由于 A 和 B 在相同域名下，也是 <code>abc.com</code>，浏览器会自动带上之前的 Cookie。此时服务端就可以通过该 Cookie 来验证登录状态了。</li></ol><h3 id="跨域-sso-cas" tabindex="-1">跨域 SSO（CAS） <a class="header-anchor" href="#跨域-sso-cas" aria-label="Permalink to &quot;跨域 SSO（CAS）&quot;">​</a></h3><blockquote><p>其实这个才是SSO的标准实现，基于CAS</p></blockquote><p><strong>CAS</strong>（Central Authentication Service）中央授权服务，本身是一个开源协议，分为 1.0 版本和 2.0 版本。1.0 称为基础模式，2.0 称为代理模式，适用于存在非 Web 应用之间的单点登录。</p><p>来张快乐简图</p><p><img src="https://doc.k1r4ca.top/pic/jwt-cas.jpeg" alt="jwt-cas"></p><p>Sir,this way! <a href="https://www.cnblogs.com/wangsongbai/p/10299655.html" target="_blank" rel="noreferrer">一篇文章彻底弄懂CAS实现SSO单点登录原理</a></p><h2 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h2><blockquote><p>压轴重点，把JWT单独拉出来分析一下 <em>( 别问为什么了求你了(-_-） )</em></p></blockquote><p>JWT是Auth0提出的，以下信息主要来自<a href="https://jwt.io/" target="_blank" rel="noreferrer">jwt.io</a></p><p>放一点JWT的缺点</p><ol><li><strong>过期时间问题</strong>：由于服务端不保存 Session 状态，因此无法在使用过程中废止某个 Token，或是更改 Token 的权限。也就是说，一旦 JWT 签发，在到期之前就会始终有效，除非服务端部署额外的逻辑。因此如果是浏览器端应用的话，使用 JWT 认证机制还需要设计一套 JWT 的主动更新删除的机制，这样就增加了系统的复杂性。</li><li><strong>安全性</strong>：由于 JWT 的 Claims 是 Base64 编码的，并没有加密，因此 JWT 中不能存储敏感数据</li><li><strong>性能问题</strong>：JWT 占用空间过大，Cookie 限制一般是 4k，可能会无法容纳，所以 JWT 一般放 LocalStorage 里面，并且用户在系统的每次 HTTP 请求都会把 JWT 携带在 Header 里面，HTTP 请求的 Header 可能比 Body 还要大。</li></ol><p>接下来分析一下JWT的结构</p><p>标准形式下由三个部分构成，用<code>.</code>隔开；三部分如下</p><ul><li>Header 头部</li><li>Payload 载荷</li><li>Signature 签名</li></ul><p>所以就像这样 <code>xxxxx.yyyyy.zzzzz</code></p><h3 id="头部" tabindex="-1">头部 <a class="header-anchor" href="#头部" aria-label="Permalink to &quot;头部&quot;">​</a></h3><p>由类型<code>JWT</code>和加密形式构成</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后头部会被Base64URL加密</p><h3 id="载荷" tabindex="-1">载荷 <a class="header-anchor" href="#载荷" aria-label="Permalink to &quot;载荷&quot;">​</a></h3><p>因为可以被直接解密，所以存放一些不敏感信息</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jehoshaphat Tse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1441593502</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1441594722</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;aud&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mrsingsing@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里面的前五个字段都是由 JWT 的标准所定义的，所谓<code>Registered claims</code></p><ul><li><code>iss</code>：该 JWT 的签发者</li><li><code>sub</code>：该 JWT 所面向的用户</li><li><code>aud</code>：接收该 JWT 的一方</li><li><code>exp</code>（expires）：什么时候过期，这是 Unix 时间戳</li><li><code>iat</code>（issued at）：在什么时候签发的。</li></ul><p>然后载荷会被Base64URL加密</p><h3 id="签名" tabindex="-1">签名 <a class="header-anchor" href="#签名" aria-label="Permalink to &quot;签名&quot;">​</a></h3><p>把头部和载荷加密拼接后用之前确定的加密方式和secret进行签名，拼接在最后</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>HMACSHA256(</span></span>
<span class="line"><span>  base64UrlEncode(header) + &quot;.&quot; +</span></span>
<span class="line"><span>  base64UrlEncode(payload),</span></span>
<span class="line"><span>  secret)</span></span></code></pre></div><blockquote><p>这下搞明白之前Ek1ng问的伪造jwt的方式了，先<s>通过什么奇奇怪怪的方法</s>拿到secret，然后基于secret进行签名的构造</p></blockquote><br><h3 id="在线生成器" tabindex="-1">在线生成器 <a class="header-anchor" href="#在线生成器" aria-label="Permalink to &quot;在线生成器&quot;">​</a></h3><p><a href="https://jwt.io/#debugger-io" target="_blank" rel="noreferrer">官方工具</a> 可在网站上直接生成JWT <s>加密小玩具</s></p><p><br><br></p><blockquote><p>没啥好说的，继续努力吧，本来就是什么都不会捏~</p></blockquote><br><blockquote><p>参考文章</p><p><a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81" target="_blank" rel="noreferrer">HTTP基本认证 - 维基百科</a></p><p><a href="https://tsejx.github.io/blog/authentication/" target="_blank" rel="noreferrer">前端开发登录鉴权方案完全梳理 | mrsingsing</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noreferrer">HTTP | MDN</a></p><p><a href="http://ma5hr00m.top/posts/dev/usual-auth" target="_blank" rel="noreferrer">Web 鉴权方案 | 阿菇の博客 </a></p><p><a href="https://www.cnblogs.com/wangsongbai/p/10299655.html" target="_blank" rel="noreferrer">一篇文章彻底弄懂CAS实现SSO单点登录原理 - Hi，王松柏</a></p><p><a href="https://jwt.io/" target="_blank" rel="noreferrer">JSON Web Tokens - jwt.io</a></p></blockquote>`,111),l=[n];function o(h,p,k,r,d,c){return a(),i("div",null,l)}const u=s(t,[["render",o]]);export{g as __pageData,u as default};
